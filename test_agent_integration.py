#!/usr/bin/env python3
"""
Script de prueba para la integraci√≥n del agente refactorizado con LPMS.
Permite probar la funcionalidad sin ejecutar toda la aplicaci√≥n.
"""

import sys
import os
import json
from datetime import datetime

# Agregar el directorio actual al path para importar m√≥dulos locales
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_agent_integration():
    """Prueba completa de la integraci√≥n del agente con LPMS"""
    print("üß™ INICIANDO PRUEBA DE INTEGRACI√ìN AGENTE-LPMS")
    print("=" * 60)

    try:
        # Importar m√≥dulos necesarios
        print("üì¶ Importando m√≥dulos...")
        from agent_integration import LPMSAgentIntegration
        import crm_database as db
        print("‚úÖ M√≥dulos importados correctamente")

        # Verificar conexi√≥n a base de datos
        print("\nüîå Verificando conexi√≥n a base de datos...")
        conn = db.connect_db()
        if conn:
            print("‚úÖ Conexi√≥n a PostgreSQL exitosa")
            conn.close()
        else:
            print("‚ùå Error de conexi√≥n a PostgreSQL")
            return False

        # Inicializar integraci√≥n
        print("\nü§ñ Inicializando integraci√≥n del agente...")
        integration = LPMSAgentIntegration()
        print("‚úÖ Integraci√≥n inicializada correctamente")

        # Obtener lista de casos disponibles para prueba
        print("\nüìã Obteniendo casos disponibles...")
        try:
            cases = db.get_all_cases()
            if cases:
                print(f"‚úÖ Encontrados {len(cases)} casos en la base de datos")

                # Mostrar primeros 3 casos como ejemplo
                print("\nüìÑ Primeros casos disponibles:")
                for i, case in enumerate(cases[:3]):
                    print(f"  {i+1}. ID: {case.get('id')} - {case.get('caratula', 'Sin car√°tula')[:50]}...")

                # Solicitar ID de caso para prueba
                while True:
                    try:
                        case_id_input = input("\nüîç Ingrese el ID del caso para probar (o '0' para cancelar): ").strip()
                        if case_id_input == '0':
                            print("‚ùå Prueba cancelada por el usuario")
                            return False

                        case_id = int(case_id_input)

                        # Verificar que el caso existe
                        case_data = integration.get_case_data_for_agent(case_id)
                        print(f"\n‚úÖ Caso encontrado: {case_data['caratula']}")
                        break

                    except ValueError:
                        print("‚ùå Por favor ingrese un n√∫mero v√°lido")
                    except Exception as e:
                        print(f"‚ùå Error obteniendo caso: {e}")
                        continue

            else:
                print("‚ö†Ô∏è No se encontraron casos en la base de datos")
                print("Creando datos de prueba...")

                # Crear un caso de prueba
                test_case_id = create_test_case()
                if test_case_id:
                    case_id = test_case_id
                    print(f"‚úÖ Caso de prueba creado con ID: {case_id}")
                else:
                    print("‚ùå Error creando caso de prueba")
                    return False

        except Exception as e:
            print(f"‚ùå Error obteniendo casos: {e}")
            return False

        # Probar obtenci√≥n de datos del caso
        print(f"\nüìä Probando obtenci√≥n de datos del caso {case_id}...")
        try:
            case_data = integration.get_case_data_for_agent(case_id)
            print("‚úÖ Datos del caso obtenidos correctamente")
            print(f"   üìã Car√°tula: {case_data['caratula']}")
            print(f"   üë§ Cliente: {case_data['cliente']['nombre'] if case_data['cliente'] else 'No especificado'}")
            print(f"   üìÑ Partes: {len(case_data['partes'])} partes involucradas")
            print(f"   üìù Actividades: {len(case_data['actividades'])} actividades registradas")
        except Exception as e:
            print(f"‚ùå Error obteniendo datos del caso: {e}")
            return False

        # Probar generaci√≥n de acuerdo
        print(f"\nüìÑ Probando generaci√≥n de acuerdo de mediaci√≥n...")
        agreement_data = {
            "monto_compensacion": "75000.00",
            "plazo_pago_dias": "30",
            "banco_actor": "Banco de la Naci√≥n Argentina",
            "cbu_actor": "0110599520000001234567",
            "alias_actor": "empleado.indemnizacion",
            "cuit_actor": "20-12345678-9"
        }

        try:
            result = integration.generate_mediation_agreement(case_id, agreement_data)

            if result["success"]:
                print("‚úÖ Acuerdo generado exitosamente")
                print(f"   üìÑ Respuesta: {result['response'][:100]}...")

                # Guardar como actividad
                saved = integration.save_agreement_to_case(case_id, result)
                if saved:
                    print("‚úÖ Acuerdo guardado como actividad en el caso")
                else:
                    print("‚ö†Ô∏è Acuerdo generado pero no se pudo guardar como actividad")

            else:
                print(f"‚ùå Error generando acuerdo: {result.get('error', 'Error desconocido')}")

        except Exception as e:
            print(f"‚ùå Error en generaci√≥n de acuerdo: {e}")
            return False

        # Cerrar integraci√≥n
        print("\nüîö Cerrando integraci√≥n...")
        integration.close()
        print("‚úÖ Integraci√≥n cerrada correctamente")

        print("\n" + "=" * 60)
        print("üéâ PRUEBA DE INTEGRACI√ìN COMPLETADA EXITOSAMENTE")
        print("=" * 60)

        return True

    except Exception as e:
        print(f"\n‚ùå ERROR CR√çTICO EN PRUEBA: {e}")
        import traceback
        traceback.print_exc()
        return False


def create_test_case():
    """Crea un caso de prueba para testing"""
    try:
        import crm_database as db

        # Crear cliente de prueba
        client_id = db.add_client(
            nombre="Cliente de Prueba IA",
            direccion="Direcci√≥n de Prueba 123",
            email="prueba@cliente.com",
            whatsapp="1234567890",
            telefono="1234567890"
        )

        if not client_id:
            print("‚ùå Error creando cliente de prueba")
            return None

        # Crear caso de prueba
        case_id = db.add_case(
            cliente_id=client_id,
            caratula="Caso de Prueba - Integraci√≥n Agente IA",
            descripcion="Caso creado para probar la integraci√≥n del agente refactorizado con LPMS",
            estado="Activo"
        )

        if case_id:
            print(f"‚úÖ Caso de prueba creado: ID {case_id}")
            return case_id
        else:
            print("‚ùå Error creando caso de prueba")
            return None

    except Exception as e:
        print(f"‚ùå Error creando caso de prueba: {e}")
        return None


def show_menu():
    """Muestra men√∫ de opciones de prueba"""
    print("\nüîß MEN√ö DE PRUEBA - INTEGRACI√ìN AGENTE LPMS")
    print("=" * 50)
    print("1. Ejecutar prueba completa de integraci√≥n")
    print("2. Probar solo conexi√≥n a base de datos")
    print("3. Probar solo inicializaci√≥n del agente")
    print("4. Crear caso de prueba")
    print("5. Salir")
    print("=" * 50)

    while True:
        try:
            option = input("Seleccione una opci√≥n (1-5): ").strip()

            if option == "1":
                success = test_agent_integration()
                print(f"\nResultado: {'‚úÖ EXITOSO' if success else '‚ùå FALLIDO'}")
                break
            elif option == "2":
                test_database_connection()
                break
            elif option == "3":
                test_agent_initialization()
                break
            elif option == "4":
                case_id = create_test_case()
                if case_id:
                    print(f"‚úÖ Caso de prueba creado con ID: {case_id}")
                else:
                    print("‚ùå Error creando caso de prueba")
                break
            elif option == "5":
                print("üëã Hasta luego!")
                return
            else:
                print("‚ùå Opci√≥n no v√°lida. Intente nuevamente.")

        except KeyboardInterrupt:
            print("\nüëã Prueba interrumpida por el usuario")
            return
        except Exception as e:
            print(f"‚ùå Error en opci√≥n seleccionada: {e}")
            break


def test_database_connection():
    """Prueba solo la conexi√≥n a la base de datos"""
    print("\nüîå Probando conexi√≥n a PostgreSQL...")
    try:
        import crm_database as db
        conn = db.connect_db()
        if conn:
            print("‚úÖ Conexi√≥n exitosa a PostgreSQL")
            conn.close()
        else:
            print("‚ùå Error de conexi√≥n")
    except Exception as e:
        print(f"‚ùå Error: {e}")


def test_agent_initialization():
    """Prueba solo la inicializaci√≥n del agente"""
    print("\nü§ñ Probando inicializaci√≥n del agente...")
    try:
        from agent_core import AgentCore
        agent = AgentCore()
        print("‚úÖ Agente inicializado correctamente")
        # No cerramos el agente aqu√≠ para evitar problemas
    except Exception as e:
        print(f"‚ùå Error inicializando agente: {e}")


if __name__ == "__main__":
    print("üöÄ SCRIPT DE PRUEBA - INTEGRACI√ìN AGENTE LPMS")
    print("Este script permite probar la integraci√≥n sin ejecutar la aplicaci√≥n completa.")

    if len(sys.argv) > 1 and sys.argv[1] == "--auto":
        # Modo autom√°tico para CI/CD o testing
        success = test_agent_integration()
        sys.exit(0 if success else 1)
    else:
        # Modo interactivo
        show_menu()